Esempio rubrica:
ho solo controller action e cookie(?)
In tutti i controller ho la stringa application message. La do alla view affinchè la posso leggere nel pop up. In tutti i controller perchè la jsp se la aspetta sempre
Ho due tipi di factory: una mySQL e una per i cookie. Ho che ritorno sempre un factory perchè, per il subtyping, posso poi istanziare a piacere una delle due sottoclassi.
cookie dao factory: classe che si memorizza oggetto request e oggetto response e poi metterà a disposizione i vari metodi.
Per cambiare utente loggato ottengo data access
getUserDao: crea un nuovo cookie dao implementation

Metto dentro oggetto cookie tutti i cookie letti dalla request. Utente loggato viene salvato sul cookie con user id, un hash di separazione(, nome utente e cognome? )
in findLoggedUser vado quindi a leggere tutti i cookie e se il nome utente è corrisponde all'utente loggato, ritorno il loggedUser

Per accedere al database creo una dao factory:
sulla dao factory creo la begin transaction che inizializza la transazione: chiamo class for name, leggo database (basta cambiare costante per cambiare database), setto connessione in autocommit a false

common view: passo dao factory, il session dao factory, e la request. La common view prepara un oggetto che è lista di stringhe che contiene le iniziali dei contatti dell'utente loggato

Dalla dao factory, chiamo la get user dao, la quale crea una classe figlia che si occupa dell'accesso a mySQL, e gli passo la connection.
UserDaoMySQLJBDCImpl: con il costruttore salva la connessione. Si prende poi l'intero utente passando come id utente l'id utente loggato. Si ha quindi l'intero record dell'utente loggato

Ottengo poi un contactDao tramite getContactDao passando sempre la stessa connessione.
ContactDAOMySQLJDBCImpl si memorizza la connessione internamente. Riempio poi la stringa initial con le iniziali dei contatti dell'utente, passando l'utente
Dalla request vado a leggere il parametro selectInitial, inizialmente null (parametro assente all'inizio). Se ho ottenuto null, oppure se l'iniziale selezionata è * (tolto), se l'elenco delle iniziali è > 0 (si ha almeno un contatto), allora prendo la prima iniziale(?)
se l'iniziale non è nulla, allora vado avanti
Prendo poi dalla contact Dao tutti i contatti dato un utente, l'iniziale selezionata (prima dei contatti dell'utente). Mi tirerà fuori tutti i contatti che iniziano per la prima iniziale.

Nel view model dovrò mettere quindi l'iniziale selezionata, la lista delle iniziali, e la lista dei contatti

Commit transaction: chiama commit sulla connessione attiva. Committo poi la transizione anche della sezione, anche se sarà metodo vuoto perchè non esiste però il modello richiede la commit dopo operazione sui dao.

La jsp come prima cosa si va a leggere tutte le informazioni della view model. Inizia poi a costruire l'html

Gestione application message: se application message != null, allora costruisco un js dinamico dove l'application message diventa uguale a quello passato con la jsp (blocco jsp che crea javascrip dinamico)
A questo punto definisco una funzione OnLoadHandler
questa chiama l'header, e la main (funzione che potrò mettere variabile in ogni jsp). Blocco inserito in tutte le pagine jsp per gestire application message, far chiamare il metodo da ogni jsp quanto completo il caricamento della pagina, e un main che posso mettere variabile in ogni jsp: la chiamata viene inserita in un try catch così se c'è si chiama, sennò catch
Ingegnerizza il concetto di messaggio (generato da controller e visualizzato da html), e il lancio degli script al caricamento della pagina.

Vado a gestire solo il main, l'header e il foot sono gestite da un include(?)
header.inc: definisce una funzione headerOnLoadHandler che va a gestire 
Si ha poi il blocco header, che gestisce menu e blocco di login: si va a creare l'header, metto la classe logo. Creo poi una form di logout, chiamata quando si clicca sul pulsante di logout: questa chiama un dispatcher che chiama il controller con managment e l'azione logout
Abbiamo poi le varie voci di menu:
home chiama il dispatcher passandoci 
Se il menù active link è uguale a home, metto la classe active, sennò non metto nessuna classe. Se sono in home il bottone ha un "colore diverso", per indicare che il bottone corrisponde a quello dell'attuale conversazione. Questa voce di menu è sempre presente
Se sono loggato invece devo andare a creare le altre due voci di menù:
rubrica: chiamo dispatcher con action address book managment. Se active link è uguale a rubrica metto classe action
Ultima voce: logout, questa non sarà mai active. Se clicco, chiamo la logout submit: submitto la form di logout, la quale chiama il dispatcher che effettua logout

Il dispatcher lo chiama con controller action, e homemanagment.logon
Se sono loggato visualizzo la form di login, se non sono loggato non la visualizzo

Blocco main rubrica:
prima section: title. Uso tag h1 e mostro select initial. Inserisco poi un button con valore nuovo contatto. Quando clicco su questo button, chiamo funzione insert contact perchè la mainOnLoadHandler vi ha associato al bottone questa funzinoe.
Ho poi un elenco di iniziali che sono tutti link. Li inserisco quindi all'interno di un nav: abbiamo intanto un asterisco da cui leggo tutti i contatti e poi la lista delle iniziali.
Partendo da *: controllo prima di tutto se * è già selezionata. In questo caso non la rendo selezionabile. Se invece ho selezionato un altra iniziale è selezionabile. Quando la clicco, chiamo la changeInitial passando * come parametro. 
Per le altre iniziali, prendo la lista, e faccio un ciclo for per controllarle tutte

Se l'iniziale selezionata non è quella che sto visualizzando, quando clicco sull'iniziale, chiamo la changeInitial passandogli l'iniziale. Una volta visualizzato l'elenco delle iniziali, faccio la sezione dei contatti:
section. Ciclo for sull'array dei contatti, e ad ogni giro creo un article, con la propria rappresentazione css. Dentro l'article si ha l'immagine del bidone, cliccabile, che chiama la funzione deleteContact passando il contactID. Avrò poi l'intestazione della section che conterrà "cognome, nome". È un link: quando ci clicco viene chiamata modify contact, passando il contactID permettendo la modifica del contatto. Mostro poi il telefono, la mail, l'indirizzo e la città, e poi chiudo l'article. Tramite ciclo for visualizzo tutti.

Creo una form per le varie operazioni

Includo poi footer

Andiamo ora a gestire le call to action:
la più facile è quella delle singole iniziali: se per esempio clicco su N, viene chiamata changeInitial passando come parametro N. Questa prende la lettera passata, chiama la form corrispettiva (chiama dispatcher passando la selectedInitual) Viene submittata form con N e poi viene chiamato di nuovo il controller (che chiama common view?)
common view si legge le varie iniziali, chiamo funzione che tirà su tutti i contatti che iniziano con l'iniziale passata, permettendo di visualizzare i contatti che iniziano con quella lettera. Si avrà quindi che vengono mostrati i contatti e la N non sarà più cliccabile

Nuovo contatto: bottone newContactButton di classe button. Quando clicco, dato che la funzione onMainHandler ci ha associato la funzione insertContact, viene chiamato questo metodo. Tale funzione, fa la submit della form insertForm: chiama dispatcher con controller action addressBookManager insert view, e con selectedInitial riempita dinamicamente con l'iniziale selezionata nella pagina 
Insert view: dispatcher passa request della response, creo dao factory, inizializzo dao factory, e ottengo loggedUser (il contatto viene inserito per lo specifico utente)
Riempio poi il loggedUser, il loggedOn per vedere se l'utente è loggato, passo iniziale selezionata, e poi chiamo InsModView: jsp di inserimento e modifica.
InsModView: si procura loggedOn (è default a true ma dovrebbe esserci la lettura), leggo loggedUser, application message, active link, selected initial, contatto (se c'è) in quanto la uso anche per la modifica, includo htmlhead
campo rubrica, se action modified: il titolo sarà modifica contatto, sennò nuovo contatto.
Ho poi la form di inserimento: InsModForm: che chiama dispetcher e poi avrò tutti i vari campi
First name: text, value = nome contatto passato se modified, altrimenti stringa vuota; e lo stesso vale per tutti gli altri campi. Il radio Button sex se insert default M, se modified viene mantenuto il campo del contatto; ho poi indirizzo, città, telefono, mail..
Ho poi un bottone di submit che invia la form, e un bottone backButton (Annulla)
Nel form avrò poi contactID se modified, selected initial, e controller action

Quando clicco annulla: sull'evento di click chiama goBack, che fa submit della back form: form che chiama dispatcher con controller action con valore addressBookManagment
Riga commentata: se si scommenta, quando si clicca annulla si ritorna sulla iniziale selezionata

Se clicco sul bottone di submit viene chiamata submitContact: nella selected initial mette la iniziale del cognome così come compilata nella form (inizialmente vuoto). Così l'iniziale selezionata passata sarà la prima lettera del cognome che sto inserendo. Come controller action messo AddressBookManagment.status: insert nel caso di inserimento, modify nel caso di modifica. 

Bottone delete: chiamo deleteContact, che va a riempire contactId con codice passato, e poi fa submit della form. La deleteForm chiama dispatcher con controller action AddressBookManagment.delete, passerà contactId da cancellare, e selectedId per tornare alla iniziale in cui si era precedentemente alla chiamata
creo contactDao, leggo contatto con quel contactID, e in quel dao chiamo la delete passando l'id per cancellare il contatto. Chiamo poi la contactView, per mostrare la lista aggiornata.

Quando clicco sul nome della persona: viene chiamata modifyContact passando contactID. Questo modulo va a inserire l'id nella modifyForm e fa la submit. Passa id, selectedInitial, e chiama dispatcher con controller action AddressBookManagment.modifyView.
Si va a chiamare la stessa jsp usata per inserire il nuovo contatto, avendo però stavolta il campo modify, e quindi la form verrà riempita con i valori del contatto che voglio modificare. Se clicco annulla, come prima, chiamo la goBack. Quando clicco su invia chiamo l'AddressBookManagment in stato modify, non ho più insert. Legge utente loggato, prende contact DAO, legge contatto con corrispettivo contactID, e visualizza poi i dati aggiornato (?).

Soltanto 2 view: XModView: visualizzata nel caso di insert e modify, e una per il resto (non ricordo)
Unico controller con 6 controllerAction, e 2 view

Se si vuole mostrare lista contatti dopo logOn: quando clicco ok form login, chiamo AddressBookManagment e faccio fare quindi a quest'ultimo il log on.
Se il risultato di una call to action, la view deve essere del controller che fa l'azione

Conversazione di media difficoltà: inserimento, modifica, cancellazione

Per sicurezza posso applicare hash, criptare l'userId.. (Non richieste)
Approcci più "comuni": maggiore difficoltà computazionale su client


